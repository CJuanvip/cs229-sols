import numpy as np
import homework1_5b as hm1b


class SpectrumModel():
    """
    The SpectrumModel type packs the smooths of each training example in a data set
    of light spectra together so the entire model can be evaluated conveniently.
    """
    def __init__(data_set, features, weight_matrix, **kwargs):
        self._data_set = data_set
        self._features = features

        spectrums = {}
        for i in range(0, len(data_set)):
            W_i = weight_matrix(kwargs, features)
            y_i = data_set[i]
            spectrums[i] = hm1b.LWLRModel(W_i, features, y_i)

        self._spectrums = spectrums


    def evaluate(self, x):
        """
        Evaluate takes an input vector of wavelengths X, and returns a matrix of 
        estimates such that each row i is a function generated by the smooth of the spectrum from 
        the ith training example. Each column j is the estimate of relative flux by estimator
        i for input value j.
        """
        # First try treating x as a vector. If this succeeds we are evaluating pointwise.
        rows = len(self._spectrums)
        try:
            rows = len(self._spectrums)
            cols = len(x)

            results = np.zeros((rows, cols))

            for i, spec_i in enumerate(self.spectrums):
                for j, xj in enumerate(x):
                    results[i, j] = spec_i(xj)

            return results
        except:
            # Otherwise, try treating it as a scalar.
            results = np.zeros((rows, 1))
            for i, spec_i in enumerate(self.spectrums):
                results[i, 0] = spec_i(x)

            return results
        """
        try:
            results = np.zeros(len(x))
            for i, xi in enumerate(x):
                results[i] = self.__evaluate(xi)

            return results
        except:
            # Otherwise, try treating it as a scalar.
            return self.__evaluate(x)
        """
    def __call__(self, x):
        return self.evaluate(x)


"""
data = np.loadtxt('quasar_train.csv', delimeter=',')
Xtrain = data[0]
data_set = data[1:]

for i in range(1, len(data)+1):
    Wi = hm1b.weightM(tau, Xtrain)
    ytrain = data[i]
    spectrums[i] = hm1b.LWLRModel(W, Xtrain, ytrain)
"""